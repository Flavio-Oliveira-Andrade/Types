### Introdução - Tipagem Estática e Generics

Vamos estudar o mair duferencial do Typescripts em relacao ao javaScript o sistema de tipos aprofundar a tipagem estatica  conhecer novos tipos, Types assertion,  e os generics, que te ajudarao na reutilizacao de codigo

## Aprenderemos
- Declaracao tipos em colecao, Arrays e `Tuplas`;
- Declaracao de variaveis do tipo objeto do `TypeScript`
- Compreender o que sao `types Aliases`
- Compreender o que 'e uma `Classe`
- Compreender o que 'e uma `Interface`
- Compreender o que sao `Types Asseertion e Generics`
- Estrutura um model que usa conceitos aprendidos /

O TypeScript também nos proporciona novas estruturas de dados que não existem no JavaScript que, muitas vezes, podem nos ajudar a resolver de uma forma melhor e mais coesa alguns problemas que encontramos no dia a dia do desenvolvimento de software

## Tipos de coleção

Chegou a hora de conhecer mais sobre os dois tipos de coleção mais importantes do Typescript: Arrays (que você provavelmente já trabalhou bastante ao longo do curso) e Tuplas.

## Arrays

Arrays são conjuntos de valores de mesmo tipo. Para declará-los, você pode adicionar o tipo esperado do array com a sintaxe let arrayName: type[] = [...];

```
let names: string[] = ["Mary Joe", "Alan Joe"];
```

## Tuplas

Tuplas permitem declarar um conjunto de valores cuja ordem e tipo dos valores são fixas. Em JavaScript, elas são representadas como arrays (por isso a semelhança!), mas são estruturas diferentes. Por exemplo, você pode querer representar um valor como um par de uma string e um número.

Para declarar uma tupla, use a sintaxe let variableName: [type, type, ...]:

```
let fullName: [string, string] = ["Jane", "Doe"];
let person: [string, number] = ["Jane Doe", 35];
let car: [string, string, number] = ["Ford", "F400", 10];
```

## Type Aliases

Types aliases (apelidos de tipos) sao utilizados para declarar a forma de um objeto nomeando o tipo, o que nos permite usar o mesmo tipo mais de uma vez e mos referor a a ele atraves de um unico nome . Um type alias

### Exemplo Type Aliase :

```
type Point = {
  x: number;
  y: number;
};


function printCoord(pt: Point) {
  console.log("O valor da cordenada x é: " + pt.x);
  console.log("O valor da coordenada y é: " + pt.y);
}

printCoord({ x: 100, y: 100 });
//saída:
//O valor da cordenada x é: 100
//O valor da cordenada y é: 100
```

Podemos dar nome a qualquer tipo e nao  apenas a um tipo de objeto.

Exercícios

Crie um type para um objeto que represente um pássaro.
Crie um type que represente uma função que recebe dois valores numéricos e retorne a soma deles.
Crie um type para um objeto que represente um endereço.

## Type Unions

Type Unions (uniao de tipos) e uma forma de declarar que um objeto e um tipo formado a partir de dois ou mais tipos outros tipos, representado valores que podem ser de qulquer um desses tipos.
para isso, e preciso declarar os tipos esperado por barras (pipe)
```
// A função abaixo pode receber tanto um número
// quanto uma string.
function imprimirCPF(cpf: number | string){
  console.log("Seu CPF é: " + cpf);
}

imprimirCPF(11111111111);
// Saída:
// Seu CPF é: 11111111111
imprimirCPF('111.111.111-11');
// Saída:
// Seu CPF é: 111.111.111-11
```

Exercícios

Crie um type union que represente os estados físicos da matéria: líquido, sólido ou gasoso.
Crie um type union que represente o documento identificador de uma pessoa que pode receber valores numéricos ou texto. Ex: “123.567.890-12” ou 123456789012.
Crie um type union que represente sistemas operacionais: linux, mac os ou windows.
